// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -verify -fopenmp -x c++ -triple powerpc64le-unknown-unknown -emit-llvm %s -o - | FileCheck %s
// expected-no-diagnostics

#ifndef HEADER
#define HEADER

static int foo() { return 0; }
extern inline int bar() { return 0; }
int baz() { return 0; }

#pragma omp begin declare variant match( \
    device = {arch(ppc64le, ppc64)},     \
    implementation = {extension(match_any, keep_original_name)})

static int foo() { return 1; }
extern inline int bar() { return 1; }

#pragma omp end declare variant

int main() {
  return foo() + bar();
}

#endif
// CHECK-LABEL: define {{[^@]+}}@_Z3bazv
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-LABEL: define {{[^@]+}}@main
// CHECK-SAME: () #[[ATTR1:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store i32 0, i32* [[RETVAL]], align 4
// CHECK-NEXT:    [[CALL:%.*]] = call noundef signext i32 @_ZL3foov()
// CHECK-NEXT:    [[CALL1:%.*]] = call noundef signext i32 @_Z3barv()
// CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[CALL]], [[CALL1]]
// CHECK-NEXT:    ret i32 [[ADD]]
//
//
// CHECK-LABEL: define {{[^@]+}}@_ZL3foov
// CHECK-SAME: () #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i32 1
//
//
// CHECK-LABEL: define {{[^@]+}}@_Z3barv
// CHECK-SAME: () #[[ATTR0]] comdat {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i32 1
//
